services:
  postgresql_db:
    image: postgres:17
    user: postgres
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432" # map container's 5432 to host's 5433
    volumes:
      - "postgres-data:/var/lib/postgresql/data/"
    networks:
      - devchain-network

  migrator:
    build:
      context: .
      dockerfile: Dockerfile.migrator
    environment:
      DATABASE_URL_MIGRATION: "${DATABASE_URL_INFRA_MIGRATION}"
    depends_on:
      postgresql_db:
        condition: service_healthy
    networks:
      - devchain-network
    restart: "no"

  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command:
      - "http"
      - "${NGROK_FORWARD}"
      - "--url=${NGROK_PUBLIC_URL}"
    environment:
      NGROK_AUTHTOKEN: "${NGROK_AUTHTOKEN}"
    ports:
      - "4040:4040"
    depends_on:
      - cauldron
    networks:
      - devchain-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: 'devchain'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      LOGGING_LEVEL_ROOT: 'error'
      LOGGING_LEVEL_COM_PROVECTUS: 'error'
    networks:
      - devchain-network

  kafka:
    image: bitnami/kafka:3.9
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
      - "./containerfiles/kafka/log4j.properties:/opt/bitnami/kafka/config/log4j.properties:ro"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: 'controller,broker'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '0@kafka:9093'
      
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_LOG4J_OPTS: '-Dlog4j.configuration=file:/opt/bitnami/kafka/config/log4j.properties'
    networks:
      - devchain-network

  cauldron:
    build:
      context: .
      dockerfile: Dockerfile.webhookserver
    ports:
      - "8000:8000"
    environment:
      GITHUB_HMAC_SECRET: "${GITHUB_HMAC_SECRET}"
      KCP_BROKERS: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - devchain-network

  github-consumer:
    build:
      context: .
      dockerfile: Dockerfile.github-consumer-group
    environment:
      KC_TOPIC_GITHUB: "github"
      KCG_NAME: "github-group"
      KCP_BROKERS: "kafka:9092"
      DATABASE_URL: "${DATABASE_URL_INFRA}"
    depends_on:
      - kafka
      - cauldron
      - postgresql_db
      - migrator
    networks:
      - devchain-network

volumes:
  kafka_data:
    driver: local
  postgres-data:
    driver: local

networks:
  devchain-network:
    driver: bridge
